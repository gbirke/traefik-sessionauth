version: '3.4'
services:
    # Example service definition, see README for details
    # To access the test domains, you need to add them to you /etc/hosts file

    traefik:
     restart: always
     image: traefik:v2.4
     container_name: traefik
     ports:
       - 80:80
       - 8080
     volumes:
       - /var/run/docker.sock:/var/run/docker.sock:ro
       - ./docker/example/traefik/traefik.toml:/etc/traefik/traefik.toml
     labels:
       - traefik.enable=true
       - traefik.http.routers.api.rule=Host(`monitor.example.docker`)
       - traefik.http.routers.api.entrypoints=web
       - traefik.http.routers.api.service=api@internal
       - traefik.port=8080"
     networks:
       - proxy


    app:
        build:
          context: .
          dockerfile: ./docker/app/Dockerfile
          target: app
        volumes:
          - ./docker/example/env:/app/.env:ro
            # An example of how to override base layout, e.g. to adapt to your page design
          - ./docker/example/templates/base_layout.latte:/app/templates/base_layout.latte:ro
        networks:
          - proxy

    nginx:
        image: nginx:stable-alpine
        volumes:
          - ./docker/example/nginx/site.conf:/etc/nginx/conf.d/default.conf
          - ./docker/example/nginx/auth.conf:/etc/nginx/conf.d/auth.conf
          - ./docker/example/nginx/html:/usr/share/nginx/html
        labels:
          - traefik.enable=true
          # Static site
          - traefik.http.routers.site.rule=Host(`site.example.docker`)
          - traefik.http.routers.site.entrypoints=web
          - traefik.http.routers.site.service=site
            # Define the name of the middleware configuration for this router
          - traefik.http.routers.site.middlewares=siteauth
            # This is the middleware configuration, defining the forwardauth address
          - traefik.http.middlewares.siteauth.forwardauth.address=http://auth.example.docker/auth?redirect=http%3A%2F%2Fsite.example.docker
          - traefik.http.services.site.loadbalancer.server.port=80

          # FastCGI Proxy for authentication app
          - traefik.http.routers.auth.rule=Host(`auth.example.docker`)
          - traefik.http.routers.auth.entrypoints=web
          - traefik.http.routers.auth.service=auth
            # Putting the proxy on a different port allows us to have
            # different routes and services inside the same container
          - traefik.http.services.auth.loadbalancer.server.port=8060

          - traefik.port=80
        networks:
          - proxy

networks:
   proxy:
     driver: bridge
     name: proxy
